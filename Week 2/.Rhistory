n <- 100
# Generate the design matrix X (without a column of ones)
# whose values come from a standard normal distribution
# There are two predictors.
X_no_intercept <- rnorm(n, mean = 0, sd = 1)
# Generate beta coefficients, set the values as you wish
beta <- c(1)
# Generate errors from N(0, 1)
epsilon <- rnorm(n, mean = 0, sd = 1)
# Generate Y
Y <- X*beta + epsilon
X_no_intercept <- rnorm(n, mean = 0, sd = 1)
# Generate beta coefficients, set the values as you wish
beta <- c(1)
# Generate errors from N(0, 1)
epsilon <- rnorm(n, mean = 0, sd = 1)
# Generate Y
Y <- X_no_intercept*beta + epsilon
Y
resid?
set.seed(1)
set.seed(1)
n <- 100
# Generate the design matrix X (without a column of ones)
# whose values come from a standard normal distribution
# There are two predictors.
X_no_intercept <- rnorm(n, mean = 0, sd = 1)
# Generate beta coefficients, set the values as you wish
beta <- c(1)
# Generate errors from N(0, 1)
epsilon <- rnorm(n, mean = 0, sd = 1)
# Generate Y
Y <- X_no_intercept*beta + epsilon
Y
# Residuals when X does not contain a column of ones
fit_no_intercept <- lm(Y ~ X_no_intercept - 1) # correct this by removing the intercept
residuals_no_intercept <- resid(fit_no_intercept)
summary(residuals_no_intercept)
mean(residuals_no_intercept)
# Add a column of ones to X (with intercept term)
X_with_intercept <- cbind(1, X_no_intercept)
# Residuals when X contains a column of ones
fit_with_intercept <- lm(Y~X_with_intercept - 1)
residuals_with_intercept <- resid(fit_with_intercept)
summary(residuals_with_intercept)
# Compare residuals
mean(c(residuals_with_intercept,residuals_no_intercept))
c(mean(residuals_with_intercept,residuals_no_intercept))
# Compare residuals
c(mean(residuals_with_intercept),mean(residuals_no_intercept))
```{r}
set.seed(1)
# Sample size
n <- 100
# Generate the design matrix X (without a column of ones)
# whose values come from a standard normal distribution
# There are two predictors.
X_no_intercept <- rnorm(n, mean = 0, sd = 1)
# Generate beta coefficients, set the values as you wish
beta <- c(1)
# Generate errors from N(0, 1)
epsilon <- rnorm(n, mean = 0, sd = 1)
# Generate Y
Y <- X_no_intercept*beta + epsilon
Y
# Residuals when X does not contain a column of ones
fit_no_intercept <- lm(Y ~ X_no_intercept - 1) # correct this by removing the intercept
residuals_no_intercept <- resid(fit_no_intercept)
summary(residuals_no_intercept)
mean(residuals_no_intercept)
# Add a column of ones to X (with intercept term)
X_with_intercept <- cbind(1, X_no_intercept)
# Residuals when X contains a column of ones
fit_with_intercept <- lm(Y~X_with_intercept - 1)
residuals_with_intercept <- resid(fit_with_intercept)
summary(residuals_with_intercept)
# Compare residuals
c(mean(residuals_with_intercept),mean(residuals_no_intercept))
X = matrix(rnorm(n, mean = 0, sd = 1) ,nrow = n, ncol = p)
# Step 1: Generate Data
n <- 100 # sample size
p <- 3 # number of covariates
X = matrix(rnorm(n, mean = 0, sd = 1) ,nrow = n, ncol = p)
X
X = matrix(rnorm(n * p, mean = 0, sd = 1) ,nrow = n, ncol = p)
X
