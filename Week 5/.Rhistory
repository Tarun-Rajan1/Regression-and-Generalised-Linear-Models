# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(c(1,rho,rho,rho,1,rho,rho,rho,1),nrow = 3, ncol = 3,)
rho = 2
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(c(1,rho,rho,rho,1,rho,rho,rho,1),nrow = 3, ncol = 3,)
var(f)
Sigma
# Set the seed for reproducibility
set.seed(1)
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(c(1,rho,rho,rho,1,rho,rho,rho,1),nrow = 3, ncol = 3,)
X <- MASS::mvrnorm(N, 0, Sigma,)
rho = 2
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
Sigma
N = 3
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(N, 0, Sigma)
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed(1)
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(N, 0, Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(0,var_epsilon)
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
# Example usage:
gendata(100, 0.5, 2, 123)
N=10
rho = 0.2
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed(1)
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = 0, Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(0,var_epsilon)
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
X
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = 0, Sigma)
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = c(0,0,0), Sigma)
g
g
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed(1)
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = c(0,0,0), Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(0,var_epsilon)
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
# Example usage:
gendata(100, 0.5, 2, 123)
# Example usage:
gendata(100, 0.5, 2, 123)
Write a function `coefcor` that takes as input the same as the above, except $\rho$ is now a vector of correlations. For each value of $\rho$, it computes the OLS coefficients for $X$, and stores them as rows of a matrix (length $(\rho) \times 3$ ). For each value of $\rho$, it uses the same RN seed.
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed(1)
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = c(0,0,0), Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(0,sd = sqrt(var_epsilon))
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed()
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = c(0,0,0), Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(0,sd = sqrt(var_epsilon))
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
# Example usage:
gendata(100, 0.5, 2, 123)
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed(RNseed)
# Generate correlated predictors
# Correlation matrix for X
Sigma <- matrix(data = rep(rho, 9), nrow = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X: use mvrnorm from package MASS
X <- MASS::mvrnorm(n = N, mu = c(0,0,0), Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(0,sd = sqrt(var_epsilon))
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
# Example usage:
gendata(100, 0.5, 2, 123)
gendata <- function(N, rho, SNR, RNseed) {
# Set the seed for reproducibility
set.seed(RNseed)
# Generate correlation matrix for X
Sigma <- matrix(data = rho, nrow = 3, ncol = 3)
diag(Sigma) <- 1
# Generate multivariate normal data for X using mvrnorm from the MASS package
library(MASS)
X <- MASS::mvrnorm(n = N, mu = c(0, 0, 0), Sigma = Sigma)
# Define regression function f(X) = X1 + X2 + X3
f_X <- X[,1] + X[,2] + X[,3]
# Calculate variance of f(X)
var_fx <- var(f_X)
# Determine the variance of epsilon (noise) based on SNR
var_epsilon <- var_fx / SNR
# Generate epsilon (noise) from a normal distribution with mean zero and variance var_epsilon
epsilon <- rnorm(N, mean = 0, sd = sqrt(var_epsilon))
# Generate response Y = f(X) + epsilon
Y <- f_X + epsilon
# Return X and Y in a dataframe
return(data.frame(X1 = X[,1], X2 = X[,2], X3 = X[,3], Y = Y))
}
# Example usage:
gendata(100, 0.5, 2, 123)
coefcor <- function(N, rho_vec, SNR, RNseed) {
# Initialize a matrix to store the coefficients (length of rho_vec x 3)
coef_matrix <- matrix(0, nrow = length(rho_vec), ncol = 3)
# Loop over each correlation in rho_vec
for (i in seq_along(rho_vec)) {
rho <- rho_vec[i]  # Current correlation value
df <- gendata(N, rho, SNR, RNseed)
# Fit linear model Y ~ X1 + X2 + X3 using OLS for Y, X1, X2, and X3 from df
lm_fit <- lm(data = df, Y~ X1 + X2 + X3)
# Extract coefficients (ignore the intercept, take X1, X2, X3)
coef_matrix[i, ] <- coef(lm_fit)[-1]
}
# Return the coefficient matrix
return(coef_matrix)
}
# Example usage:
rho_vec <- c(0.1, 0.3, 0.5, 0.7, 0.9)
coefcor(100, rho_vector, 2, 123)
# Example usage:
rho_vector <- c(0.1, 0.3, 0.5, 0.7, 0.9)
coefcor(100, rho_vector, 2, 123)
